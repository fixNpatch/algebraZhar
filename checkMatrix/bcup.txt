def AddRevers(A):
    mA = [A[0:2], A[2:4]]
    C = [[0,0],[0,0]]
    for i in range(0, len(mA)):
        for j in range(0, len(mA)):
            C[i][j] = mA[(j + 1) % 2][(i + 1) % 2]
    c = []
    for i in range(0, len(C)):
        for j in range(0, len(C)):
            c.append(C[i][j])
    return c

def Additio(A, B, mod):
    C = []
    for i in range(0, len(A)):
        C.append((A[i] + B[i]) % mod)
    return C

def Multiplic(A, B, mod):
    C = [[0, 0], [0, 0]]
    mA = [A[0:2], A[2:4]]
    mB = [B[0:2], B[2:4]]

    for i in range(0, len(mA)):
        for j in range(0, len(mA[i])):
            C[i][j] = (
                              mA[j][i] * mB[i][j] +
                              mA[(j + 1) % 2][i] * mB[i][(j + 1) % 2]
                    ) % mod

    c = []
    for i in range(0, len(C)):
        for j in range(0, len(C)):
            c.append(C[i][j])
    return c

def charachteristix(result, add, reach):
    if result == [0, 0, 0, 0] or reach > 100:
        return reach
    else:
        return charachteristix(Additio(result, add, 5), add, reach + 1)



def MainCheck(path, obj):
    print(path)
    obj.ConsoleLog(path + "\n")

    # необходимо проверить все аксиомы и убедиться что это поле
    # вывести промежуточный результат проверки
    # затем проверить поле о характеристике 5

    # проверка осуществляется: единичный элемент ( в данном случае матрица) складывается 5 раз
    # можно заметить что все числа взяты по модулю 5
    # значит при сложении единичной матрицы 5 раз (элементы в матрице складываем по модулю) у нас получается нулевая матрица.

    F = []

    file = open(path, "r")
    for line in file:
        matrix = []
        for char in line:
            if '0' <= char <= '9':
                matrix.append(int(char))
        # закидываем матрицу во множество
        F.append(matrix)

    # аксиомы поля
    # a + b = b + a
    # (a + b) + c = a + (b + c)
    # a + 0 = 0 + a = a
    # a + (-a) = (-a) + a = 0
    # a * b = b * a
    # (a * b) * c = a * (b * c)
    # a * 1 = 1 * a = a
    # a * (A) = (A) * a = 1
    # a * (b + c) = a * b + a * c

    bad = False
    for i in range(0, len(F)):
        for j in range(0, len(F)):
            AB = Additio(F[i], F[j], 5)
            BA = Additio(F[j], F[i], 5)
            if AB != BA:
                bad = True
                break
    if bad:
        obj.ConsoleLog("Не выполнена аксиома a + b = b + a\n")
    else:
        obj.ConsoleLog("Выполнена аксиома a + b = b + a\n")

    bad = False
    for i in range(0, len(F)):
        for j in range(0, len(F)):
            for k in range(0, len(F)):
                AB = Additio(Additio(F[i], F[j], 5), F[k], 5)
                BA = Additio(F[i],  Additio(F[j], F[k], 5), 5)
                if AB != BA:
                    bad = True
                    break
    if bad:
        obj.ConsoleLog("Не выполнена аксиома (a + b) + c = a + (b + c)\n")
    else:
        obj.ConsoleLog("Выполнена аксиома (a + b) + c = a + (b + c)\n")

    bad = True
    for i in range(0, len(F)):
        AB = Additio(F[i], [0,0,0,0], 5)
        BA = Additio([0,0,0,0], F[i], 5)
        if AB == BA and AB == F[i] and BA == F[i]:
            bad = False
            break
    if bad:
        obj.ConsoleLog("Не выполнена аксиома a + 0 = 0 + a = 0\n")
    else:
        obj.ConsoleLog("Выполнена аксиома a + 0 = 0 + a = 0\n")

    bad = False
    for i in range(0, len(F)):
        Aa = Additio(F[i], AddRevers(F[i]), 5)
        aA = Additio(AddRevers(F[i]), F[i], 5)
        if Aa != aA:
            bad = True
            break
    if bad:
        obj.ConsoleLog("Не выполнена аксиома a + (-a) = (-a) + a = 0\n")
    else:
        obj.ConsoleLog("Выполнена аксиома a + (-a) = (-a) + a = 0\n")

    bad = False
    for i in range(0, len(F)):
        for j in range(0, len(F)):
            AB = Multiplic(F[i], F[j], 5)
            BA = Multiplic(F[j], F[i], 5)
            if AB != BA:
                bad = True
                break
    if bad:
        obj.ConsoleLog("Не выполнена аксиома a * b = b * a\n")
    else:
        obj.ConsoleLog("Выполнена аксиома a * b = b * a\n")

    bad = False
    for i in range(0, len(F)):
        for j in range(0, len(F)):
            for k in range(0, len(F)):
                AB = Multiplic(Multiplic(F[i], F[j], 5), F[k], 5)
                BA = Multiplic(F[i], Multiplic(F[j], F[k], 5), 5)
                if AB != BA:
                    print("bad data by indexes:", i, j, k)
                    bad = True
                    break
    if bad:
        obj.ConsoleLog("Не выполнена аксиома (a * b) * c = a * (b * c)\n")
    else:
        obj.ConsoleLog("Выполнена аксиома (a * b) * c = a * (b * c)\n")

    bad = False
    for i in range(0, len(F)):
        for j in range(0, len(F)):
            AB = Multiplic(F[i], [1, 0, 0, 1], 5)
            BA = Multiplic([1, 0, 0, 1], F[i], 5)
            if AB != BA:
                bad = True
                break
    if bad:
        obj.ConsoleLog("Не выполнена аксиома a * 1 = 1 * a = a\n")
    else:
        obj.ConsoleLog("Выполнена аксиома a * 1 = 1 * a = a\n")

    bad = False
    for i in range(0, len(F)):
        for j in range(0, len(F)):
            for k in range(0, len(F)):
                AB = Multiplic(F[i], Additio(F[j], F[k], 5), 5)
                BA = Additio(Multiplic(F[i], F[j], 5), Multiplic(F[i], F[k], 5), 5)
                if AB != BA:
                    print("bad data by indexes:", i, j, k)
                    bad = True
                    break
    if bad:
        obj.ConsoleLog("Не выполнена аксиома a * (b + c) = a * b + a * c\n")
    else:
        obj.ConsoleLog("Выполнена аксиома a * (b + c) = a * b + a * c\n")


    for i in range(0, len(F)):
        if F[i] == [1, 0, 0, 1]:
            obj.ConsoleLog("Во множестве есть единичный элемент(в данном случае, единичная матрица)\n")
            break

    obj.ConsoleLog("Проверяем на характеристику N\n")
    reach = charachteristix([1, 0, 0, 1], [1, 0, 0, 1], 0)
    obj.ConsoleLog("Характеристика поля: " + str(reach + 1))
    # print(reach)

    # result = [0, 0, 0 ,0]
    # A = [1, 0, 0, 1]
    # for i in range(0, 5):
    #     result = Additio(result, A, 5)
    #
    # print(result)

    return ""
